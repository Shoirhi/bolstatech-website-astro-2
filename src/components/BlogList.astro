---
import BlogUploadedLabel from "@/components/BlogUploadedLabel.astro";
import BlogCategoryLabel from "@/components/BlogCategoryLabel.astro";
import {
    Pagination,
    PaginationContent,
    PaginationItem,
    PaginationNext,
    PaginationPrevious,
} from "@/components/ui/pagination";
import type { CollectionEntry } from "astro:content";

interface Props {
    posts: CollectionEntry<"blog">[];
    categories: CollectionEntry<"blogCategories">[];
    currentCategory?: CollectionEntry<"blogCategories">;
    pagination?: {
        currentPage: number;
        lastPage: number;
        url: {
            prev?: string;
            next?: string;
        };
    };
}

const { posts, currentCategory, pagination, categories } = Astro.props;
---

{
    posts.length ? (
        <>
            <ul class="grid md:grid-cols-2 lg:grid-cols-3 gap-5">
                {posts.map((post) => (
                    <li>
                        <a
                            href={`/blog/${post.id}/`}
                            class="block px-4 py-3 border rounded-lg"
                        >
                            <p transition:name={`blogTitle-${post.id}`}>
                                {post.data.title}
                            </p>
                            <div class="mt-4 text-sm text-muted-foreground flex items-center gap-x-4 gap-y-1 flex-wrap">
                                <BlogUploadedLabel
                                    transitionName={`blogUploaded-${post.id}`}
                                    date={post.data.pubDate}
                                />
                                {post.data.category && (
                                    <BlogCategoryLabel
                                        transitionName={`blogCategory-${post.id}`}
                                        name={
                                            categories.find(
                                                (category) =>
                                                    category.id ===
                                                    post.data.category?.id,
                                            )?.data.name || "未分類"
                                        }
                                    />
                                )}
                            </div>
                        </a>
                    </li>
                ))}
            </ul>
            {pagination && pagination.lastPage > 1 && (
                <Pagination className="mt-12">
                    <PaginationContent className="grid grid-cols-3 [&>*]:place-self-center">
                        {pagination.url.prev && (
                            <PaginationItem className="col-start-1">
                                <PaginationPrevious href={pagination.url.prev} />
                            </PaginationItem>
                        )}
                        <PaginationItem className="col-start-2">
                            {pagination.currentPage} / {pagination.lastPage}
                        </PaginationItem>
                        {pagination.url.next && (
                            <PaginationItem className="cols-start-3">
                                <PaginationNext href={pagination.url.next} />
                            </PaginationItem>
                        )}
                    </PaginationContent>
                </Pagination>
            )}
        </>
    ) : (
        <p class="text-center mt-8">
            {currentCategory
                ? `${currentCategory.data.name}に関する記事はまだありません。`
                : "まだ記事はありません。"}
        </p>
    )
}
