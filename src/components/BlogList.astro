---
import BlogUploadedLabel from "@/components/BlogUploadedLabel.astro";
import BlogCategoryLabel from "@/components/BlogCategoryLabel.astro";
import {
    Pagination,
    PaginationContent,
    PaginationItem,
    PaginationNext,
    PaginationPrevious,
} from "@/components/ui/pagination";
import { getEntry, type CollectionEntry } from "astro:content";
interface Props {
    posts: CollectionEntry<"blog">[];
    categories: CollectionEntry<"blogCategories">[];
    currentCategory?: CollectionEntry<"blogCategories">;
    pagination?: {
        currentPage: number;
        lastPage: number;
        url: {
            prev?: string;
            next?: string;
        };
    };
}

const { posts, currentCategory, pagination, categories } = Astro.props;

const authors = new Map<string, CollectionEntry<"authors">>();
for (const post of posts) {
    if (post.data.author && !authors.has(post.data.author)) {
        authors.set(post.data.author, await getEntry("authors", post.data.author));
    }
}
---

{posts.length ? (
    <>
        <ul class="mt-4 grid max-w-2xl grid-cols-1 gap-x-8 gap-y-20 mx-auto lg:mx-0 lg:max-w-none lg:grid-cols-3">
            {posts.map((post) => {
                const author = post.data.author ? authors.get(post.data.author) : null;
                const category = post.data.category
                    ? categories.find((c) => c.id === post.data.category?.id)
                    : null;
                return (
                    <li class="flex" transition:name={`blogCard-${post.id}`}> 
                        <article class="flex flex-col items-start justify-between">
                            <div class="relative w-full">
                                <img src="/images/placeholder.svg" alt="" class="aspect-video w-full rounded-2xl bg-gray-100 object-cover sm:aspect-2/1 lg:aspect-3/2" />
                                <div class="absolute inset-0 rounded-2xl ring-1 ring-gray-900/10 ring-inset"></div>
                            </div>
                            <div class="max-w-xl">
                                <div class="mt-8 flex items-center gap-x-4 text-xs">
                                    <BlogUploadedLabel date={post.data.pubDate} />
                                    {category && (
                                        <BlogCategoryLabel name={category.data.name} />
                                    )}
                                </div>
                                <div class="group relative">
                                    <h3 class="mt-3 text-lg/6 font-semibold text-gray-900 group-hover:text-gray-600">
                                        <a href={`/blog/${post.id}/`}>
                                            <span class="absolute inset-0"></span>
                                            {post.data.title}
                                        </a>
                                    </h3>
                                    <p class="mt-5 line-clamp-3 text-sm/6 text-gray-600">{post.data.description}</p>
                                </div>
                                {author && (
                                    <div class="relative mt-8 flex items-center gap-x-4">
                                        <img src="/images/placeholder.svg" alt="" class="size-10 rounded-full bg-gray-100" />
                                        <div class="text-sm/6">
                                            <p class="font-semibold text-gray-900">
                                                {author.data.name}
                                            </p>
                                        </div>
                                    </div>
                                )}
                            </div>
                        </article>
                    </li>
                );
            })}
        </ul>
        {pagination && pagination.lastPage > 1 && (
            <Pagination className="mt-12">
                <PaginationContent className="grid grid-cols-3 [&>*]:place-self-center">
                    {pagination.url.prev && (
                        <PaginationItem className="col-start-1">
                            <PaginationPrevious href={pagination.url.prev} />
                        </PaginationItem>
                    )}
                    <PaginationItem className="col-start-2">
                        {pagination.currentPage} / {pagination.lastPage}
                    </PaginationItem>
                    {pagination.url.next && (
                        <PaginationItem className="col-start-3">
                            <PaginationNext href={pagination.url.next} />
                        </PaginationItem>
                    )}
                </PaginationContent>
            </Pagination>
        )}
    </>
) : (
    <p class="text-center mt-8">
        {currentCategory
            ? `${currentCategory.data.name}に関する記事はまだありません。`
            : "まだ記事はありません。"}
    </p>
)}
